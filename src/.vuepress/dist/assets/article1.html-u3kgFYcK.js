import{_ as n,o as s,c as a,b as t}from"./app-os1Y2jVR.js";const e={},p=t(`<h1 id="springboot-自定义权限管理注解" tabindex="-1"><a class="header-anchor" href="#springboot-自定义权限管理注解"><span>SpringBoot 自定义权限管理注解</span></a></h1><p>在SpringBoot中如果要想实现接口的权限控制是一件很麻烦的时间，于是可以使用自定义注解来进行权限控制。</p><h2 id="_1-注解的设计" tabindex="-1"><a class="header-anchor" href="#_1-注解的设计"><span>1.注解的设计</span></a></h2><p>需要实现的效果为</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/auth/{code}&quot;</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Access</span><span class="token punctuation">(</span>level <span class="token operator">=</span> <span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">LOGIN</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">setAuth</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> auth<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;auth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> weixinService<span class="token punctuation">.</span><span class="token function">setAuth</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span>user<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过自定义的@Access注解，传入level表明当前接口访问的的权限<br> 通过拦截器将非法访问的记录拦截<br> 通过 request.getAttribute(&quot;user&quot;) 获取当前访问的用户信息</p><h2 id="_2-拦截器的实现" tabindex="-1"><a class="header-anchor" href="#_2-拦截器的实现"><span>2.拦截器的实现</span></a></h2><p>Here is the content.</p>`,8),o=[p];function c(u,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","article1.html.vue"]]);export{r as default};
